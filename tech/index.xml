<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teches on Hao Ruan</title>
    <link>https://ruanhao.github.io/tech/</link>
    <description>Recent content in Teches on Hao Ruan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>&amp;copy; Copyright Hao Ruan</copyright>
    <lastBuildDate>Sat, 18 Nov 2017 16:49:59 +0800</lastBuildDate>
    
	<atom:link href="https://ruanhao.github.io/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OAuth 流程</title>
      <link>https://ruanhao.github.io/tech/web/oauth/</link>
      <pubDate>Sat, 18 Nov 2017 16:49:59 +0800</pubDate>
      
      <guid>https://ruanhao.github.io/tech/web/oauth/</guid>
      <description>前言 OAuth 允许第三方应用程序以用户的身份与服务提供者进行交互， 而在这个过程中应用程序并不需要知道用户在服务提供者那里保存的密码。
这其中涉及到用户，应用程序与服务提供者之间的多次信息交互。 最近读到一篇深入浅出的文章，很有代入感，遂记录于此。
OAuth 中的三角关系 OAuth 涉及三个角色：
 用户（user） 第三方应用程序（consumer） 服务提供者（service provider）  在下面的例子中，假设第三方应用程序是大众点评手机客户端，服务提供者是微信。 当你在一家环境优雅的餐厅大快朵颐之后，在手机上写下点评，并希望发布到微信朋友圈， 这时候将涉及以下一系列 OAuth 流程：
OAuth 流程 回顾 服务提供者返回 secret 以用来防止伪造请求，第三方应用程序使用 secret 对每个请求进行签名， 这样服务提供者就可以验证请求的合法性。
在 Step 3 中，对于第三方应用程序重定向的网站，用户必须检查其正确性， 因为如果第三方应用程序搞一个和服务提供者长得一样的网站，而用户又输入了用户名和密码，那就完蛋了。
在 Step 4 中，服务提供者将 request token 标记为 good-to-go ， 这样，当第三方应用程序后续请求 access token 时，就会被允许， 当然前提是这个请求是合法的（被正确的 secret 签名）。
参考 Introduction to OAuth (in Plain English)</description>
    </item>
    
    <item>
      <title>在终端下分析日志文件</title>
      <link>https://ruanhao.github.io/tech/linux/highlight/</link>
      <pubDate>Sun, 06 Aug 2017 19:59:36 +0800</pubDate>
      
      <guid>https://ruanhao.github.io/tech/linux/highlight/</guid>
      <description>常用方法 在桌面环境下，分析日志文件一般使用 TextEdit ，Sublime 等文本编辑工具，当需要查找特定的关键词时，Ctrl-F 或者 Command-F 即可。 但还是有很多内容需要用肉眼过滤，很容易看花眼。
在 Linux 上进行开发的话，会使用 grep 过滤出感兴趣的内容。比如：
 过滤某个关键词:
grep -i &#39;keyword&#39; xxx.log  过滤多个关键词:
grep &#39;kw1\|kw2&#39; xxx.log  反向过滤:
grep -v &#39;nokw&#39; xxx.log  将空行过滤掉:
grep . xxx.log   grep 功能很强，也是我最喜欢的命令之一。尽可能使用高亮模式 grep --color=auto，提升视觉享受。
问题所在 很多时候分析日志文件时，需要查找某一行同时出现多个关键词， 比如需要找出等级为 INFO ，且同时出现 &amp;ldquo;exception&amp;rdquo; 关键词的日志， 一般情况下会将命令写成这样：
grep &#39;INFO&#39; xxx.log | grep &#39;exception&#39;  但这样关键词多起来，就要写很多管道了，看上去也不直观。
解决方法 可以 source 这个脚本，将命令写成：
m -p &#39;INFO&#39; -p &#39;exception&#39; xxx.log  这样就能同时搜索多个关键词了，不过如果还能高亮那就再好不过了：</description>
    </item>
    
    <item>
      <title>SSH Reverse Tunnel（反向通道）</title>
      <link>https://ruanhao.github.io/tech/linux/ssh/</link>
      <pubDate>Wed, 14 Sep 2016 17:46:19 +0800</pubDate>
      
      <guid>https://ruanhao.github.io/tech/linux/ssh/</guid>
      <description>基本原理 端口转发是一项很有用的技术，经常会用在开发，调试阶段，合理的运用这个技术能有效地提高工作效率，做出一些很巧妙的设计。
SSH 对于大多数开发者来说并不陌生，也是登录一台主机的主要手段，但 SSH 也是可以用于实现端口转发功能的。
这里不打算介绍使用 SSH 实现本地端口转发，因为用 SSH 来做这个事情显得有些怪异，命令写出来也很不直观。 可以用 Nginx ，iptables 实现相同的功能，也可以使用 netcat 或者 socat 来快速搭建一条转发通道以便调试， 比如想要实现本地 8080 到 80 的端口转发：
socat tcp-l:localhost:8080 tcp:localhost:80  使用 SSH 可以对转发的内容进行加密的话，也可以尝试下 socat 的 openssl-connect 命令。
相比本地端口转发，基于 SSH 的反向通道转发功能（Reverse Tunnel / Call Home Tunnel）用得比较少，原理也不是很直观， 我第一次接触 -R 这个选项完全不明白这是用来干嘛的，但其实这个功能很有用。
如上图所示，主机 A 位于实验室的局域网内，通过路由器访问广域网，工作站位于广域网中。 若想让工作站访问主机 A ，通过本地端口转发的方式显然不行，因为工作站无法通过内网地址（192.168.1.3）找到局域网内的主机。
这时就可以使用 SSH Reverse Tunnel 功能了，由内网的主机发起，与外网的工作站建立 TCP 连接，之后所有的转发内容就能够走在这条 TCP 连接上了。 因为转发通道是由目的端主机发起建立的，所以是 Reverse。
用法介绍 ssh -N -f -R 8888:localhost:22 &amp;lt;user-of-workstation&amp;gt;@128.</description>
    </item>
    
    <item>
      <title>使用 Emacs 作为Python IDE</title>
      <link>https://ruanhao.github.io/tech/python/ide/</link>
      <pubDate>Wed, 24 Aug 2016 17:40:15 +0800</pubDate>
      
      <guid>https://ruanhao.github.io/tech/python/ide/</guid>
      <description> 前言 终端编辑器很适合编写脚本类语言，编辑速度快，Ctrl-Z 就能立马调试运行看到效果。 并不是建议大家一定要使用 Emacs 或者 Vim ， 如果是开发大型工程，或者是团队合作，请根据实际情况选择合适的开发工具，比如 PyCharm 。
不过，如果只是一些随写随用的脚本，何不尝试下 Emacs 呢？
插件配置 试了下几种常见 Emacs Python 插件，感觉 Elpy 不论是配置还是使用， 都比较简单和轻量化。
在 ~/.emacs.d/init.el 文件中添加以下配置代码：（需事先安装 use-package）
(use-package elpy :defer t :init (with-eval-after-load &#39;python (elpy-enable))) (add-hook &#39;elpy-mode-hook (lambda () (define-key elpy-mode-map (kbd &amp;quot;M-.&amp;quot;) &#39;elpy-goto-definition) (define-key elpy-mode-map (kbd &amp;quot;C-x M-.&amp;quot;) &#39;elpy-goto-definition-other-window) (define-key elpy-mode-map (kbd &amp;quot;M-,&amp;quot;) &#39;pop-tag-mark) (define-key elpy-mode-map (kbd &amp;quot;M-RET&amp;quot;) &#39;elpy-company-backend)))  这样就可以了，使用 Meta-. 和 Meta-, 查看函数定义和回退，使用 Meta-Enter 调出代码提示。
效果 </description>
    </item>
    
  </channel>
</rss>